import pygame
import json
import time
import random
import os
from MG3.MG_3 import run_MG3

# === SETUP ===
pygame.init()
pygame.mixer.init()
floating_texts = [] 

# === SCREEN ===
WIDTH, HEIGHT = 1024, 576
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("No Money, No Life")

# === FONTS ===
font = pygame.font.Font("Assets/Font/PressStart2P.ttf", 20)
small_font = pygame.font.Font("Assets/Font/PressStart2P.ttf", 14)
FONT = pygame.font.SysFont("arial", 20)
BIG_FONT = pygame.font.SysFont("arial", 26)
custom_font = pygame.font.Font("Assets/Font/PressStart2P.ttf", 25)
font_1 = pygame.font.SysFont('Assets/Font/PressStart2P.ttf', 28, bold=True)
floating_font = pygame.font.Font("Assets/Font/PressStart2P.ttf", 30)  

# === MUSIC ===
pygame.mixer.music.load("Assets/Song/background.mp3")
pygame.mixer.music.set_volume(0.5)
pygame.mixer.music.play(-1)

# === COLORS ===
BLACK = (0, 0, 0)
GRAY = (150, 150, 150)
WHITE = (255, 255, 255)
HIGHLIGHT = (255, 215, 0)
TICK_COLOR = (0, 200, 0)
WARNING_COLOR = (255, 0, 0)
BUTTON_COLOR = (220, 220, 220)

# === IMAGES ===
bg_img = pygame.transform.scale(pygame.image.load("Assets/Images/main.png").convert(), (WIDTH, HEIGHT))
mge_statsbar_image = pygame.image.load("Assets/Images/MGE_Statsbar.png").convert_alpha()
Menu_image = pygame.image.load("Assets/Images/Menu-button.png").convert_alpha()
Inside_menu_image = pygame.image.load("Assets/Images/Menu-2.png").convert_alpha()
map_img = pygame.image.load("Assets/Images/final_map.png").convert()
MAP_WIDTH, MAP_HEIGHT = ((800, 800))

# === TILEMAP BLOCKING ===
def load_tilemap(filename):
    tilemap = []
    with open(filename, 'r') as file:
        for line in file:
            row = [int(char) for char in line.strip()]
            tilemap.append(row)
    return tilemap

tilemap = load_tilemap("map_tiled.txt")
blocking_tiles = [1]
TILE_SIZE = 16
collision_rects = []
for y, row in enumerate(tilemap):
    for x, tile in enumerate(row):
        if tile in blocking_tiles:
            collision_rects.append(pygame.Rect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE))

# === SAVE/LOAD ===
SAVE_FILE = "save_data.json"

def save_game(player_name, selected_character):
    data = {"player_name": player_name, "selected_character": selected_character}
    with open(SAVE_FILE, "w") as f:
        json.dump(data, f)

def load_game():
    if os.path.exists(SAVE_FILE):
        with open(SAVE_FILE, "r") as f:
            data = json.load(f)
        return data
    else:
        print("No save file found. Starting a new game.")
        return None  

def reset_game():
    global warning_message
    if os.path.exists(SAVE_FILE):
        os.remove(SAVE_FILE)
        warning_message = "Save file deleted!"
    else:
        warning_message = "No save file to delete!"

# === GAME VARIABLES ===
player_name = ''
selected_character = None
active_input = False
warning_message = ''
game_state = "intro"
show_intro_message = True
typing_done = False
running = True

# CURSOR
cursor_visible = True
cursor_timer = 0
cursor_interval = 500

# UI ELEMENTS
male_box = pygame.Rect(330, 325, 40, 40)
female_box = pygame.Rect(650, 325, 40, 40)
start_button = pygame.Rect(100, 455, 200, 60)
continue_button = pygame.Rect(400, 455, 200, 60)
reset_button = pygame.Rect(700, 455, 200, 60)
typed_message = ""
typing_index = 0

# === PLAYER ===
character_paths = {"male": "male/", "female": "female/"}

def load_player_images(character_folder):
    path = character_paths[character_folder]
    return {
        "idle": {
            "w": pygame.image.load(path + f"{character_folder}_idle_up.png").convert_alpha(),
            "s": pygame.image.load(path + f"{character_folder}_idle_down.png").convert_alpha(),
            "a": pygame.image.load(path + f"{character_folder}_idle_left.png").convert_alpha(),
            "d": pygame.image.load(path + f"{character_folder}_idle_right.png").convert_alpha()
        },
        "walk": {
            "w": [
                pygame.image.load(path + f"{character_folder}_walk_up_1.png").convert_alpha(),
                pygame.image.load(path + f"{character_folder}_walk_up_2.png").convert_alpha()
            ],
            "s": [
                pygame.image.load(path + f"{character_folder}_walk_down_1.png").convert_alpha(),
                pygame.image.load(path + f"{character_folder}_walk_down_2.png").convert_alpha()
            ],
            "a": [
                pygame.image.load(path + f"{character_folder}_walk_left_1.png").convert_alpha(),
                pygame.image.load(path + f"{character_folder}_idle_left.png").convert_alpha()
            ],
            "d": [
                pygame.image.load(path + f"{character_folder}_walk_right_1.png").convert_alpha(),
                pygame.image.load(path + f"{character_folder}_idle_right.png").convert_alpha()
            ]
        }
    }

# === CAMERA ===
def get_camera_offset():
    camera_x = max(0, min(player_x - WIDTH // 2, MAP_WIDTH - WIDTH))
    camera_y = max(0, min(player_y - HEIGHT // 2, MAP_HEIGHT - HEIGHT))
    return camera_x, camera_y

# Load and scale character images, and define their positions
def is_near(player_x, player_y, npc_x, npc_y, distance=50):
    return abs(player_x - npc_x) < distance and abs(player_y - npc_y) < distance

def draw_popup(screen, message, font, color=(0, 0, 0), bg_color=(255, 255, 255), border_color=(0, 0, 0), padding=20, line_spacing=5):
    screen_width, screen_height = screen.get_size()
    box_margin = 40
    box_width = screen_width - 2 * box_margin
    box_height = 160
    box_x = box_margin
    box_y = screen_height - box_height - 20
    box_rect = pygame.Rect(box_x, box_y, box_width, box_height)

    # Wrap text
    words = message.split(' ')
    lines = []
    line = ''
    for word in words:
        test_line = line + word + ' '
        if font.size(test_line)[0] < box_width - 2 * padding:
            line = test_line
        else:
            lines.append(line.strip())
            line = word + ' '
    lines.append(line.strip())

    popup_surface = pygame.Surface((box_width, box_height))
    popup_surface.set_alpha(230)
    popup_surface.fill(bg_color)
    pygame.draw.rect(popup_surface, border_color, popup_surface.get_rect(), 4)

    line_height = font.get_height() + line_spacing
    y_offset = padding
    for l in lines:
        if y_offset + line_height > box_height - padding - 40:
            break
        text_surf = font.render(l, True, color)
        popup_surface.blit(text_surf, (padding, y_offset))
        y_offset += line_height

    # Draw "ENTER" button
    button_width, button_height = 100, 30
    button_x = (box_width - button_width) // 2
    button_y = box_height - button_height - padding
    button_rect = pygame.Rect(button_x, button_y, button_width, button_height)
    pygame.draw.rect(popup_surface, (180, 180, 180), button_rect)
    pygame.draw.rect(popup_surface, border_color, button_rect, 2)

    text_surf = font.render("ENTER", True, color)
    text_rect = text_surf.get_rect(center=button_rect.center)
    popup_surface.blit(text_surf, text_rect)

    screen.blit(popup_surface, (box_x, box_y))

    # Return absolute screen coordinates of the button
    return pygame.Rect(box_x + button_x, box_y + button_y, button_width, button_height)

characters = [
    {
        "img": pygame.transform.scale(pygame.image.load("Assets/Characters/restaurant.png"), (80, 80)),
        "x": 770,
        "y": 130,
        "description": "Welcome to the restaurant, where the scent of sizzling meals meets the sound of scrubbing dishes. "
                       "Ready to roll up your sleeves? Take on the washing challenge and earn some well-deserved money."
    },
    {
        "img": pygame.transform.scale(pygame.image.load("Assets/Characters/grocerry.png"), (100, 100)),  
        "x": 600,
        "y": 660,
        "description": "Bustling with customers and chaos. But today, you are not shopping — you are working. "
                       "Step behind the counter and become the cashier of the day."
    },
    {
        "img": pygame.transform.scale(pygame.image.load("Assets/Characters/cyber_cafe.png"), (80, 80)),
        "x": 90,
        "y": 665,
        "description": "This is the teenagers' zone, and the only way to win here is to type like lightning. "
                       "Put your speed and accuracy to the test and rake in digital dough with each correct keystroke."
    },
    {
        "img": pygame.transform.scale(pygame.image.load("Assets/Characters/Food_stall.png"), (65, 65)),
        "x": 750,
        "y": 353,
        "description": "Ready to bring you back to life. Choose your meal, sit back, and recover the energy you need to keep going. "
                       "After all, a hardworking spirit needs fuel to thrive."
    },
    {
        "img": pygame.transform.scale(pygame.image.load("Assets/Characters/lazapee.png"), (80, 80)),
        "x": 60,
        "y": 170,
        "description": "This is not just another shop — it is a gateway to passive income. "
                       "Invest wisely, and your money will work while you rest. "
                       "In this town, fortune favors the bold... and the smart."
    }
]

# === NPC ===
npc_img = pygame.image.load("female/female_idle_left.png").convert_alpha()
npc_img = pygame.transform.scale(npc_img, (80, 80))
class NPC:
    def __init__(self, x, y, dialogue):
        self.x = x
        self.y = y
        self.dialogue = dialogue
        self.current_line = 0
        self.talking = False
        self.last_change = time.time()
        self.direction = "idle"
    def is_near_player(self, px, py):
        return ((self.x - px)**2 + (self.y - py)**2)**0.5 < 60
    def draw(self, surface, camera_x, camera_y):
        surface.blit(npc_img, (self.x - camera_x, self.y - camera_y))
        if self.is_near_player(player_x, player_y) and not self.talking:
            screen.blit(FONT.render("PRESS E", True, WHITE), (self.x - camera_x, self.y - camera_y - 25))
    def move_random(self):
        if time.time() - self.last_change > 2:
            self.direction = random.choice(["w", "a", "s", "d", "idle"])
            self.last_change = time.time()
        if self.direction == "w": self.y -= 1
        if self.direction == "a": self.x -= 1
        if self.direction == "s": self.y += 1
        if self.direction == "d": self.x += 1

# FUNCTION TO GENERATE INTRO MESSAGE
def generate_intro_message(name):
    return (
        f"WELCOME {name.upper()}! In this game, you need money to survive. "
        "Explore different rooms to work and earn cash. To restore your energy, "
        "you can either buy food or drinks, which is faster, or go back home to sleep, "
        "which takes more time. So plan wisely, keep your energy up, and make the most of your day!"
    )

# === RENDER WRAPPED TEXT ===
def draw_text_box(surface, message, font, color, box_rect, padding=10, line_height=20):
    words = message.split(' ')
    lines = []
    line = ''

    for word in words:
        test_line = line + word + ' '
        if font.size(test_line)[0] < box_rect.width - 2 * padding:
            line = test_line
        else:
            lines.append(line)
            line = word + ' '
    lines.append(line)

    pygame.draw.rect(surface, WHITE, box_rect)
    pygame.draw.rect(surface, BLACK, box_rect, 3)

    for i, l in enumerate(lines):
        line_surface = font.render(l.strip(), True, color)
        surface.blit(line_surface, (box_rect.x + padding, box_rect.y + padding + i * line_height))

# Set Energy etc
energy = 120
money = 100
total_energy_spent = 0
total_money_earned = 0

# Floating text
def add_floating_text(text, x, y, color):
    floating_texts.append({"text": text, "x": x, "y": y, "start_time": pygame.time.get_ticks(), "color": color})

def draw_floating_texts():
    current_time = pygame.time.get_ticks()
    texts_to_remove = []
    for ft in floating_texts[:]:
        elapsed = (current_time - ft["start_time"]) / 1000
        if elapsed > 1.5:
            texts_to_remove.append(ft)
            continue

        offset_y = int(30 * elapsed)
        alpha = max(255 - int(255 * (elapsed / 1.5)), 0)

        # Create the text surface
        text_surface = floating_font.render(ft["text"], True, ft["color"])
        text_surface.set_alpha(alpha)

        # Create an outline by drawing black text slightly shifted
        outline_color = (50, 50, 50)  
        for dx in [-2, 0, 2]:
            for dy in [-2, 0, 2]:
                if dx != 0 or dy != 0:
                    outline_surface = floating_font.render(ft["text"], True, outline_color)
                    outline_surface.set_alpha(alpha)
                    screen.blit(outline_surface, (ft["x"] + dx, ft["y"] - offset_y + dy))
    
        screen.blit(text_surface, (ft["x"], ft["y"] - offset_y))

    for ft in texts_to_remove:
        floating_texts.remove(ft)


# === GAME LOOP ===
dialogue_lines = ["Hi! Welcome to the store!", "DON'T COME BACK", "BYE", "[MENU]"]
npc = NPC(300, 300 , dialogue_lines)
menu_options = ["🛒 Shop", "📜 Quest"]
selected_option = 0


# 初始位置
player_x = 500
player_y = 400
player_speed = 1.5
player_direction = "s"
walk_frame = 0
walk_timer = 0
walk_delay = 200
player_imgs = load_player_images("male")

clock = pygame.time.Clock()
while running:
    dt = clock.tick(60)
    screen.fill(WHITE)
    cursor_timer += dt
    if cursor_timer >= cursor_interval:
        cursor_visible = not cursor_visible
        cursor_timer = 0

    if game_state == "intro":
        # Intro Screen Logic
        screen.blit(bg_img, (0, 0))
        name_color = BLACK if player_name else GRAY
        display_name = player_name if player_name else "ENTER YOUR NAME"
        if active_input and cursor_visible:
            display_name += "|"
        screen.blit(font.render(display_name, True, name_color), (380, 210))

        pygame.draw.rect(screen, BLACK, male_box, 3)
        pygame.draw.rect(screen, BLACK, female_box, 3)
        if selected_character == 'male':
            pygame.draw.rect(screen, HIGHLIGHT, male_box, 3)
            pygame.draw.line(screen, TICK_COLOR, (340, 345), (345, 355), 3)
            pygame.draw.line(screen, TICK_COLOR, (345, 355), (360, 335), 3)
        elif selected_character == 'female':
            pygame.draw.rect(screen, HIGHLIGHT, female_box, 3)
            pygame.draw.line(screen, TICK_COLOR, (660, 345), (665, 355), 3)
            pygame.draw.line(screen, TICK_COLOR, (665, 355), (680, 335), 3)

        pygame.draw.rect(screen, BUTTON_COLOR, start_button)
        pygame.draw.rect(screen, HIGHLIGHT if player_name and selected_character else BLACK, start_button, 4)
        screen.blit(font.render("Start", True, BLACK), (start_button.x + 55, start_button.y + 20))

        pygame.draw.rect(screen, BUTTON_COLOR, continue_button)
        pygame.draw.rect(screen, BLACK, continue_button, 4)
        screen.blit(font.render("Continue", True, BLACK), (continue_button.x + 25, continue_button.y + 20))

        pygame.draw.rect(screen, BUTTON_COLOR, reset_button)
        pygame.draw.rect(screen, BLACK, reset_button, 4)
        screen.blit(font.render("Reset", True, BLACK), (reset_button.x + 55, reset_button.y + 20))

        if warning_message:
            screen.blit(font.render(warning_message, True, WARNING_COLOR), (180, 530))

    elif game_state == "game":
        camera_x, camera_y = get_camera_offset()
        screen.fill((0, 0, 0))
        screen.blit(map_img, (0 - camera_x, 0 - camera_y))  # Apply camera offset # Apply camera offset here

       # EFFECT FOR INTRO MESSAGE
        if show_intro_message:
            if not typing_done:
                if typing_index < len(intro_message):
                    typed_message += intro_message[typing_index]
                    typing_index += 1
                else:
                    typing_done = True

            # DRAW MESSAGE BOX
            dialog_box_rect = pygame.Rect(110, 380, 800, 180)
            draw_text_box(screen, typed_message, small_font, BLACK, dialog_box_rect, padding=15, line_height=22)

        # Player movement 
        old_x, old_y = player_x, player_y
        keys = pygame.key.get_pressed()
        moving = False
        new_x, new_y = player_x, player_y  # New position after moving


    # 获取按键
        keys = pygame.key.get_pressed()
        moving = False
        new_x, new_y = player_x, player_y  # 
        
        if keys[pygame.K_w]:
            new_y -= player_speed
            player_direction = "w"
            moving = True
        if keys[pygame.K_s]:
            new_y += player_speed
            player_direction = "s"
            moving = True
        if keys[pygame.K_a]:
            new_x -= player_speed
            player_direction = "a"
            moving = True
        if keys[pygame.K_d]:
            new_x += player_speed
            player_direction = "d"
            moving = True

        # 创建玩家的目标矩形，用来检查碰撞
        player_rect = pygame.Rect(new_x, new_y, player_imgs["idle"][player_direction].get_width(), player_imgs["idle"][player_direction].get_height())
        for rect in collision_rects:
            if player_rect.colliderect(rect):
                moving = False  # Stop movement on collision
                break

        # 检查碰撞
        for rect in collision_rects:
            if player_rect.colliderect(rect):
                moving = False  # 如果发生碰撞，则不允许移动
                break

        # 如果没有发生碰撞，更新玩家位置
        if moving:
            player_x, player_y = new_x, new_y

        # 更新动画帧
        if moving:
            if pygame.time.get_ticks() - walk_timer > walk_delay:
                walk_frame = (walk_frame + 1) % len(player_imgs["walk"][player_direction])
                walk_timer = pygame.time.get_ticks()
        else:
            walk_frame = 0

        # 更新NPC和绘制玩家
        npc.move_random()
        npc.draw(screen, camera_x, camera_y)
        current_img = player_imgs["walk"][player_direction][walk_frame] if moving else player_imgs["idle"][player_direction]
        screen.blit(current_img, (player_x - camera_x, player_y - camera_y))
        # for rect in collision_rects:
            # pygame.draw.rect(screen, (255, 0, 0), (rect.x - camera_x, rect.y - camera_y, rect.width, rect.height), 1)

        if npc.talking:
            pygame.draw.rect(screen, (0, 0, 0), (50, HEIGHT - 160, WIDTH - 100, 110))
            pygame.draw.rect(screen, (255, 255, 255), (50, HEIGHT - 160, WIDTH - 100, 110), 3)
            current_line = npc.dialogue[npc.current_line]
            if current_line == "[MENU]":
                for i, opt in enumerate(menu_options):
                    color = (255, 255, 0) if i == selected_option else WHITE
                    txt = BIG_FONT.render(opt, True, color)
                    screen.blit(txt, (80 + i * 150, HEIGHT - 120))
            else:
                screen.blit(FONT.render(current_line, True, WHITE), (60, HEIGHT - 130))

        for char in characters:
            screen.blit(char["img"], (char["x"] - camera_x, char["y"] - camera_y))

            popup_button_rect = None
            for character in characters:
                screen.blit(character["img"], (character["x"] - camera_x, character["y"] - camera_y))

        # Only show popup for the first nearby character
        for character in characters:
            if is_near(player_x, player_y, character["x"], character["y"]):
                popup_button_rect = draw_popup(screen, character["description"], small_font)
                break  # Only one popup at a time

        if not show_intro_message:
            screen.blit(mge_statsbar_image, (0, 0))
            energy_text = custom_font.render(f"{energy:06}", True, (0, 0, 0))
            money_text = custom_font.render(f"{money:06}", True, (0, 0, 0))
            screen.blit(energy_text, (80, 28))
            screen.blit(money_text, (80, 105))
            draw_floating_texts()
    pygame.display.flip()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.MOUSEBUTTONDOWN:
            if game_state == "intro":
                active_input = True
                if male_box.collidepoint(event.pos): selected_character = 'male'
                if female_box.collidepoint(event.pos): selected_character = 'female'
                if start_button.collidepoint(event.pos):
                    if start_button.collidepoint(event.pos):
                        if player_name and selected_character:
                            save_game(player_name, selected_character)
                    if player_name and selected_character:
                        intro_message = generate_intro_message(player_name)
                        show_intro_message = True
                        typing_done = False
                        typed_message = ""
                        typing_index = 0
                        player_imgs = load_player_images(selected_character)  # Load correct character assets
                        game_state = "game"
                    else:
                        warning_message = "Enter name and choose a character!"  # Only show this when conditions aren't met
                if continue_button.collidepoint(event.pos):
                    saved_data = load_game()
                    if saved_data:
                        player_name = saved_data["player_name"]
                        selected_character = saved_data["selected_character"]
                        game_state = "game"
                        warning_message = ''
                        show_intro_message = False
                        typing_done = False
                        typed_message = ""
                        typing_index = 0
                        player_imgs = load_player_images(selected_character)
                    else:
                        warning_message = "No saved game found!"
                if reset_button.collidepoint(event.pos): reset_game()
            elif game_state == "game" and show_intro_message and typing_done:
                show_intro_message = False
            elif game_state == "game":
                if popup_button_rect and popup_button_rect.collidepoint(event.pos):
                    print("ENTER button clicked!")
                    pygame.mixer.music.stop()
        
                    # PAUSE MAIN GAME LOOP while MG3 runs
                    pygame.mixer.music.stop()

                    # Create a new screen surface for MG3 and pass it
                    mg3_screen = pygame.display.set_mode((1024, 576))
                    result = run_MG3(mg3_screen)

                    # After MG3 finishes, re-create the main screen
                    screen = pygame.display.set_mode((WIDTH, HEIGHT))
                    # Recreate screen and pass it into MG3
                    pygame.display.set_mode((WIDTH, HEIGHT))
        
                    if result:
                        energy -= result["energy_spent"]
                        money += result["money_earned"]
                        add_floating_text(f"-{result['energy_spent']}", 250, 28, (128, 128, 128))
                        add_floating_text(f"+{result['money_earned']}", 250, 110, (128, 128, 128))

                        pygame.mixer.music.load("Assets/Song/background.mp3")
                        pygame.mixer.music.set_volume(0.5)
                        pygame.mixer.music.play(-1)

                        # Force a redraw after MG3 ends
                        pygame.display.set_mode((WIDTH, HEIGHT))

        if event.type == pygame.KEYDOWN:
            if game_state == "intro":
                if event.key == pygame.K_BACKSPACE:
                    player_name = player_name[:-1]
                elif len(player_name) < 30:
                    player_name += event.unicode
            elif game_state == "game":
                if event.key == pygame.K_RETURN and show_intro_message and typing_done:
                    show_intro_message = False
                if event.key == pygame.K_e and npc.is_near_player(player_x, player_y):
                    npc.talking = True
                    npc.current_line = 0
                    selected_option = 0
                if npc.talking:
                    if npc.dialogue[npc.current_line] == "[MENU]":
                        if event.key == pygame.K_LEFT:
                            selected_option = (selected_option - 1) % len(menu_options)
                        elif event.key == pygame.K_RIGHT:
                            selected_option = (selected_option + 1) % len(menu_options)
                        elif event.key == pygame.K_RETURN:
                            print(f"You selected: {menu_options[selected_option]}")
                            npc.talking = False
                    else:
                        if event.key == pygame.K_SPACE:
                            npc.current_line += 1
                            if npc.current_line >= len(npc.dialogue):
                                npc.talking = False
                        if event.key == pygame.K_ESCAPE:
                            npc.talking = False
        
draw_floating_texts()
pygame.display.flip()
pygame.quit()
